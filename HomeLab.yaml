AWSTemplateFormatVersion: 2010-09-09
Description: Active Directory Lab in AWS

Resources:
  LabVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true

  KeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: HomeLabKeyPair

  LabPublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref LabVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: us-east-1a
      MapPublicIpOnLaunch: true

  LabPrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref LabVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: us-east-1a
      MapPublicIpOnLaunch: false

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  # Attach Internet Gateway to VPC
  AttachInternetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref LabVPC
      InternetGatewayId: !Ref InternetGateway

  # IP for NAT Gateway
  NatGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId: !Ref LabPublicSubnet
      AllocationId: !GetAtt NatGatewayEIP.AllocationId

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref LabVPC

  # Public Route (Internet Access)
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Associate Public Route Table with Public Subnet
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref LabPublicSubnet
      RouteTableId: !Ref PublicRouteTable

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref LabVPC

  # Private Route (Route all outbound traffic through NAT Gateway)
  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway

  # Associate Private Route Table with Private Subnet
  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref LabPrivateSubnet
      RouteTableId: !Ref PrivateRouteTable

  DCSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow AD traffic, RDP (limited), and SSM for DC
      VpcId: !Ref LabVPC
      SecurityGroupIngress:
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: 10.0.1.0/24 # Allow ICMP from private subnet
        - IpProtocol: tcp
          FromPort: 53
          ToPort: 53
          CidrIp: 10.0.1.0/24 # DNS TCP
        - IpProtocol: udp
          FromPort: 53
          ToPort: 53
          CidrIp: 10.0.1.0/24 # DNS UDP
        - IpProtocol: tcp
          FromPort: 88
          ToPort: 88
          CidrIp: 10.0.1.0/24 # Kerberos TCP
        - IpProtocol: udp
          FromPort: 88
          ToPort: 88
          CidrIp: 10.0.1.0/24 # Kerberos UDP
        - IpProtocol: tcp
          FromPort: 389
          ToPort: 389
          CidrIp: 10.0.1.0/24 # LDAP TCP
        - IpProtocol: udp
          FromPort: 389
          ToPort: 389
          CidrIp: 10.0.1.0/24 # LDAP UDP
        - IpProtocol: tcp
          FromPort: 636
          ToPort: 636
          CidrIp: 10.0.1.0/24 # LDAPS TCP
        - IpProtocol: tcp
          FromPort: 445
          ToPort: 445
          CidrIp: 10.0.1.0/24 # SMB
        - IpProtocol: tcp
          FromPort: 135
          ToPort: 135
          CidrIp: 10.0.1.0/24 # RPC
        - IpProtocol: tcp
          FromPort: 49152
          ToPort: 65535
          CidrIp: 10.0.1.0/24 # Dynamic RPC ports
        - IpProtocol: udp
          FromPort: 123
          ToPort: 123
          CidrIp: 0.0.0.0/0 # NTP
        - IpProtocol: tcp
          FromPort: 3389
          ToPort: 3389
          CidrIp: 0.0.0.0/0 # RDP, Replace with your IP address /32
      SecurityGroupEgress:
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: 10.0.1.0/24 # Allow ICMP to private subnet
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0 # HTTPS
        - IpProtocol: tcp
          FromPort: 53
          ToPort: 53
          CidrIp: 0.0.0.0/0 # DNS TCP
        - IpProtocol: udp
          FromPort: 53
          ToPort: 53
          CidrIp: 0.0.0.0/0 # DNS UDP

  ClientSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow limited traffic for clients
      VpcId: !Ref LabVPC
      SecurityGroupIngress:
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: 10.0.1.0/24 # Allow ICMP from private subnet
        - IpProtocol: tcp
          FromPort: 3389
          ToPort: 3389
          CidrIp: 0.0.0.0/0 # RDP, Replace with your IP address /32
        - IpProtocol: tcp
          FromPort: 53
          ToPort: 53
          CidrIp: 10.0.1.0/24 # DNS TCP
        - IpProtocol: udp
          FromPort: 53
          ToPort: 53
          CidrIp: 10.0.1.0/24 # DNS UDP
      SecurityGroupEgress:
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: 10.0.1.0/24 # Allow ICMP to private subnet
        - IpProtocol: tcp
          FromPort: 53
          ToPort: 53
          CidrIp: 10.0.1.0/24 # DNS TCP
        - IpProtocol: udp
          FromPort: 53
          ToPort: 53
          CidrIp: 10.0.1.0/24 # DNS UDP
        - IpProtocol: tcp
          FromPort: 88
          ToPort: 88
          CidrIp: 10.0.1.10/32 # Kerberos TCP (DC IP)
        - IpProtocol: udp
          FromPort: 88
          ToPort: 88
          CidrIp: 10.0.1.10/32 # Kerberos UDP (DC IP)
        - IpProtocol: tcp
          FromPort: 389
          ToPort: 389
          CidrIp: 10.0.1.10/32 # LDAP TCP (DC IP)
        - IpProtocol: udp
          FromPort: 389
          ToPort: 389
          CidrIp: 10.0.1.10/32 # LDAP UDP (DC IP)
        - IpProtocol: tcp
          FromPort: 636
          ToPort: 636
          CidrIp: 10.0.1.10/32 # LDAPS TCP (DC IP)
        - IpProtocol: tcp
          FromPort: 445
          ToPort: 445
          CidrIp: 10.0.1.10/32 # SMB (DC IP)
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0 # HTTPS
        - IpProtocol: udp
          FromPort: 123
          ToPort: 123
          CidrIp: 0.0.0.0/0 # NTP
        - IpProtocol: tcp
          FromPort: 135
          ToPort: 135
          CidrIp: 10.0.1.10/32 # RPC (DC IP)
        - IpProtocol: tcp
          FromPort: 49152
          ToPort: 65535
          CidrIp: 10.0.1.10/32 # Dynamic RPC (DC IP)

  # IAM Role for SSM
  SSMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: EC2SSMRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  # Instance Profile for SSM
  SSMInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: ADLabInstanceProfile
      Roles:
        - !Ref SSMRole

  DC1:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-001adaa5c3ee02e10
      InstanceType: t3.medium
      SubnetId: !Ref LabPrivateSubnet
      PrivateIpAddress: 10.0.1.10
      SecurityGroupIds:
        - !Ref DCSecurityGroup
      IamInstanceProfile: !Ref SSMInstanceProfile
      KeyName: !Ref KeyPair

  Client1:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-001adaa5c3ee02e10
      InstanceType: t3.medium
      SubnetId: !Ref LabPrivateSubnet
      SecurityGroupIds:
        - !Ref ClientSecurityGroup
      IamInstanceProfile: !Ref SSMInstanceProfile
      KeyName: !Ref KeyPair